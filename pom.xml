<?xml version="1.0" encoding="UTF-8"?>
<!--
  JavaFX Boilerplate Project

  https://github.com/akman/javafx-boilerplate

  MIT License (MIT)

  Copyright (C) 2019 - 2024 Alexander Kapitman <akman.ru@gmail.com>

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.akman</groupId>
  <artifactId>javafx-boilerplate</artifactId>
  <version>0.62.0</version>
  <packaging>jar</packaging>

  <name>${applicationName}</name>
  <description>${applicationDescription}</description>
  <url>${applicationUrl}</url>
  <inceptionYear>${applicationInceptionYear}</inceptionYear>

  <properties>

    <!-- Maven -->
    <mavenVersion>3.9.9</mavenVersion>

    <!-- Java -->
    <javaVersion>21</javaVersion>
    <maven.compiler.source>${javaVersion}</maven.compiler.source>
    <maven.compiler.target>${javaVersion}</maven.compiler.target>
    <maven.compiler.release>${javaVersion}</maven.compiler.release>

    <!-- JavaFX -->
    <javafxVersion>21.0.5</javafxVersion>

    <!-- Encoding -->
    <defaultEncoding>UTF-8</defaultEncoding>
    <project.build.sourceEncoding>${defaultEncoding}</project.build.sourceEncoding>
    <project.reporting.outputEncoding>${defaultEncoding}</project.reporting.outputEncoding>

    <!-- Application -->
    <applicationName>JavaFX Boilerplate Project</applicationName>
    <applicationVersion>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}</applicationVersion>
    <applicationFullName>${applicationName} v${applicationVersion}</applicationFullName>
    <applicationDescription>JavaFX application boilerplate project using gradle and maven build tools. This project aims to cover best practices for JavaFX application development as a whole. It provides tool recommendations for linting, testing and packaging.</applicationDescription>
    <applicationScmUser>akman</applicationScmUser>
    <applicationScmRepo>javafx-boilerplate</applicationScmRepo>
    <applicationUrl>https://github.com/${applicationScmUser}/${applicationScmRepo}</applicationUrl>
    <applicationInceptionYear>2019</applicationInceptionYear>
    <applicationAuthorNickname>Akman</applicationAuthorNickname>
    <applicationAuthorName>Alexander Kapitman</applicationAuthorName>
    <applicationAuthorEmail>akman.ru@gmail.com</applicationAuthorEmail>
    <applicationAuthorUrl>https://akman.github.io/</applicationAuthorUrl>
    <applicationAuthorRole>developer</applicationAuthorRole>
    <applicationAuthorTimezone>Europe/Kaliningrad</applicationAuthorTimezone>
    <applicationCopyright>Copyright (C) ${applicationCopyrightYears} ${applicationAuthorName} &lt;${applicationAuthorEmail}&gt;</applicationCopyright>
    <applicationVendor>Akman</applicationVendor>
    <applicationVendorUrl>https://akman.github.io/</applicationVendorUrl>
    <applicationLicenseFile>LICENSE</applicationLicenseFile>
    <applicationLicenseName>MIT License</applicationLicenseName>
    <applicationLicenseType>MIT</applicationLicenseType>
    <applicationLicenseDistribution>repo</applicationLicenseDistribution>
    <applicationLicenseComment>This is a lax, permissive non-copyleft free software license, compatible with the GNU GPL.</applicationLicenseComment>
    <applicationLicenseUrl>https://spdx.org/licenses/MIT.html</applicationLicenseUrl>

    <!-- Launcher -->
    <applicationLauncherName>launcher</applicationLauncherName>
    <applicationModuleName>ru.akman.launcher</applicationModuleName>
    <applicationClassName>ru.akman.launcher.Launcher</applicationClassName>
    <applicationJvmArgs>-Xms256m -Xmx512m</applicationJvmArgs>
    <applicationArgs>--debug</applicationArgs>
    <applicationSplashImage>splash.png</applicationSplashImage>

    <!-- JLink -->
    <jlinkConfigDir>${project.basedir}/package</jlinkConfigDir>
    <jlinkTemplateWin>${jlinkConfigDir}/win-script.template</jlinkTemplateWin>
    <jlinkTemplateNix>${jlinkConfigDir}/nix-script.template</jlinkTemplateNix>
    <jlinkDir>${project.build.directory}/jlink</jlinkDir>
    <jlinkModsDir>${jlinkDir}/mods</jlinkModsDir>
    <jlinkLibsDir>${jlinkDir}/libs</jlinkLibsDir>
    <jlinkImageDir>${jlinkDir}/runtime-image</jlinkImageDir>

    <!-- JPackage -->
    <jpackageConfigDir>${project.basedir}/package/${platformFamily}</jpackageConfigDir>
    <jpackageResourcesDir>${jpackageConfigDir}/resources</jpackageResourcesDir>
    <jpackageInputDir>${jpackageConfigDir}/input</jpackageInputDir>
    <jpackageDir>${project.build.directory}/jpackage</jpackageDir>
    <jpackageImageDir>${jpackageDir}/${platformImageName}</jpackageImageDir>

    <!-- Dependencies -->
    <version.javafx>${javafxVersion}</version.javafx>
    <version.picocli>4.7.6</version.picocli>
    <version.slf4japi>2.0.15</version.slf4japi>
    <version.logback>1.5.11</version.logback>
    <version.jupiter>5.11.2</version.jupiter>
    <version.junit>1.11.2</version.junit>

    <!--
      Dependency conflict in spock-core:
      org.apache.groovy:groovy:4.0.20 conflict with 4.0.23
      org.junit.platform:junit-platform-commons:1.10.2 conflict with 1.11.2
    -->
    <version.spock>2.4-M4-groovy-4.0</version.spock>

    <version.mockito>5.14.2</version.mockito>
    <version.groovy>4.0.23</version.groovy>
    <!--version.hamcrest>2.2</version.hamcrest-->
    <!--version.assertj>3.16.1</version.assertj-->

    <!-- Tools -->
    <version.checkstyle>10.18.2</version.checkstyle>
    <version.pmd>7.6.0</version.pmd>
    <version.spotbugs>4.8.6</version.spotbugs>
    <version.codenarc>3.5.0-groovy-4.0</version.codenarc>
    <version.jacoco>0.8.12</version.jacoco>

    <!-- Plugins -->
    <version.maven-enforcer-plugin>3.5.0</version.maven-enforcer-plugin>
    <version.maven-clean-plugin>3.4.0</version.maven-clean-plugin>
    <version.properties-maven-plugin>1.2.1</version.properties-maven-plugin>
    <version.build-helper-maven-plugin>3.6.0</version.build-helper-maven-plugin>
    <version.maven-toolchains-plugin>3.2.0</version.maven-toolchains-plugin>
    <version.maven-compiler-plugin>3.13.0</version.maven-compiler-plugin>
    <version.maven-antrun-plugin>3.1.0</version.maven-antrun-plugin>
    <version.maven-checkstyle-plugin>3.5.0</version.maven-checkstyle-plugin>
    <version.maven-pmd-plugin>3.25.0</version.maven-pmd-plugin>
    <version.spotbugs-maven-plugin>4.8.6.4</version.spotbugs-maven-plugin>
    <version.license-maven-plugin>4.6</version.license-maven-plugin>
    <version.maven-resources-plugin>3.3.1</version.maven-resources-plugin>
    <version.native2ascii-maven-plugin>2.1.1</version.native2ascii-maven-plugin>
    <version.maven-source-plugin>3.3.1</version.maven-source-plugin>
    <version.maven-javadoc-plugin>3.10.1</version.maven-javadoc-plugin>
    <version.maven-jxr-plugin>3.5.0</version.maven-jxr-plugin>
    <version.maven-jar-plugin>3.4.2</version.maven-jar-plugin>
    <version.maven-assembly-plugin>3.7.1</version.maven-assembly-plugin>
    <version.gmavenplus-plugin>4.0.1</version.gmavenplus-plugin>
    <version.maven-surefire-plugin>3.5.1</version.maven-surefire-plugin>
    <version.maven-surefire-report-plugin>3.5.1</version.maven-surefire-report-plugin>
    <version.maven-failsafe-plugin>3.5.1</version.maven-failsafe-plugin>
    <version.jacoco-maven-plugin>${version.jacoco}</version.jacoco-maven-plugin>
    <version.exec-maven-plugin>3.4.1</version.exec-maven-plugin>
    <version.jlink-maven-plugin>0.1.11</version.jlink-maven-plugin>
    <version.jpackage-maven-plugin>0.1.5</version.jpackage-maven-plugin>
    <version.maven-install-plugin>3.1.3</version.maven-install-plugin>
    <version.maven-deploy-plugin>3.1.3</version.maven-deploy-plugin>
    <version.maven-release-plugin>3.1.1</version.maven-release-plugin>
    <version.nexus-staging-maven-plugin>1.7.0</version.nexus-staging-maven-plugin>
    <version.maven-scm-plugin>2.1.0</version.maven-scm-plugin>
    <version.maven-gpg-plugin>3.2.7</version.maven-gpg-plugin>
    <version.versions-maven-plugin>2.17.1</version.versions-maven-plugin>
    <version.maven-dependency-plugin>3.8.0</version.maven-dependency-plugin>
    <version.maven-site-plugin>3.20.0</version.maven-site-plugin>
    <version.maven-project-info-reports-plugin>3.7.0</version.maven-project-info-reports-plugin>
    <version.taglist-maven-plugin>3.2.1</version.taglist-maven-plugin>
    <version.maven-changelog-plugin>2.3</version.maven-changelog-plugin>

  </properties>

  <dependencies>
    <!-- JavaFX -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-swing</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    <!--
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-web</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-media</artifactId>
      <version>${version.javafx}</version>
    </dependency>
    -->
    <!-- picocli -->
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>${version.picocli}</version>
    </dependency>
    <!-- slf4j + logback -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${version.slf4japi}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${version.logback}</version>
    </dependency>
    <!-- JUnit -->
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-commons</artifactId>
      <version>${version.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${version.jupiter}</version>
      <scope>test</scope>
    </dependency>
    <!-- Groovy -->
    <dependency>
      <groupId>org.apache.groovy</groupId>
      <artifactId>groovy</artifactId>
      <version>${version.groovy}</version>
      <scope>test</scope>
    </dependency>
    <!-- Spock -->
    <dependency>
      <groupId>org.spockframework</groupId>
      <artifactId>spock-core</artifactId>
      <version>${version.spock}</version>
      <scope>test</scope>
    </dependency>
    <!-- Mockito -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${version.mockito}</version>
      <scope>test</scope>
    </dependency>
    <!-- Hamcrest -->
    <!--
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${version.hamcrest}</version>
      <scope>test</scope>
    </dependency>
    -->
    <!-- AssertJ -->
    <!--
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${version.assertj}</version>
      <scope>test</scope>
    </dependency>
    -->
  </dependencies>

  <build>

    <resources>
      <resource>
        <directory>${project.basedir}</directory>
        <includes>
          <include>LICENSE</include>
          <include>NOTICE</include>
        </includes>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <plugin> <!-- properties-maven-plugin -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>properties-maven-plugin</artifactId>
          <version>${version.properties-maven-plugin}</version>
          <!--
          <configuration>
            <files>
              <file>${project.basedir}/maven.properties</file>
            </files>
          </configuration>
          -->
        </plugin>
        <plugin> <!-- maven-enforcer-plugin -->
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${version.maven-enforcer-plugin}</version>
          <configuration>
            <rules>
              <requireMavenVersion>
                <version>[${mavenVersion},)</version>
              </requireMavenVersion>
            </rules>
          </configuration>
        </plugin>
        <plugin> <!-- maven-clean-plugin -->
          <artifactId>maven-clean-plugin</artifactId>
          <version>${version.maven-clean-plugin}</version>
          <configuration>
            <filesets>
              <fileset>
                <directory>${project.basedir}</directory>
                <includes>
                  <include>*.log</include>
                </includes>
              </fileset>
              <fileset>
                <directory>log</directory>
                <followSymlinks>false</followSymlinks>
              </fileset>
            </filesets>
          </configuration>
        </plugin>
        <plugin> <!-- build-helper-maven-plugin -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${version.build-helper-maven-plugin}</version>
        </plugin>
        <plugin> <!-- maven-toolchains-plugin -->
          <artifactId>maven-toolchains-plugin</artifactId>
          <version>${version.maven-toolchains-plugin}</version>
          <configuration>
            <toolchains>
              <jdk>
                <version>[${javaVersion},)</version>
              </jdk>
            </toolchains>
          </configuration>
        </plugin>
        <plugin> <!-- maven-compiler-plugin -->
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${version.maven-compiler-plugin}</version>
          <configuration>
            <fork>true</fork>
            <compilerArgs>
              <arg>-Xlint:unchecked</arg>
              <arg>-Xlint:deprecation</arg>
              <arg>-Werror</arg>
            </compilerArgs>
            <annotationProcessorPaths>
              <path>
                <groupId>info.picocli</groupId>
                <artifactId>picocli-codegen</artifactId>
                <version>${version.picocli}</version>
              </path>
            </annotationProcessorPaths>
            <compilerArgs>
              <arg>-Aproject=${project.groupId}/${project.artifactId}</arg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin> <!-- maven-antrun-plugin -->
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${version.maven-antrun-plugin}</version>
          <dependencies>
            <dependency>
              <groupId>org.codenarc</groupId>
              <artifactId>CodeNarc</artifactId>
              <version>${version.codenarc}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin> <!-- maven-checkstyle-plugin -->
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${version.maven-checkstyle-plugin}</version>
          <dependencies>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${version.checkstyle}</version>
            </dependency>
          </dependencies>
          <configuration>
            <!-- all -->
            <configLocation>config/checkstyle/google_checks.xml</configLocation>
            <excludes>**/build/**/*, **/target/**/*</excludes>
            <resourceExcludes>**/build/**/*, **/target/**/*</resourceExcludes>
            <consoleOutput>true</consoleOutput>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <failsOnError>false</failsOnError>
            <!-- check -->
            <failOnViolation>false</failOnViolation>
            <maxAllowedViolations>0</maxAllowedViolations>
            <logViolationsToConsole>true</logViolationsToConsole>
          </configuration>
        </plugin>
        <plugin> <!-- maven-pmd-plugin -->
          <artifactId>maven-pmd-plugin</artifactId>
          <version>${version.maven-pmd-plugin}</version>
          <dependencies>
            <dependency>
              <groupId>net.sourceforge.pmd</groupId>
              <artifactId>pmd-core</artifactId>
              <version>${version.pmd}</version>
            </dependency>
            <dependency>
              <groupId>net.sourceforge.pmd</groupId>
              <artifactId>pmd-java</artifactId>
              <version>${version.pmd}</version>
            </dependency>
            <dependency>
              <groupId>net.sourceforge.pmd</groupId>
              <artifactId>pmd-javascript</artifactId>
              <version>${version.pmd}</version>
            </dependency>
            <dependency>
              <groupId>net.sourceforge.pmd</groupId>
              <artifactId>pmd-jsp</artifactId>
              <version>${version.pmd}</version>
            </dependency>
          </dependencies>
          <configuration>
            <!-- all -->
            <rulesets>config/pmd/ruleset.xml</rulesets>
            <!--excludes>
              <exclude></exclude>
            </excludes-->
            <analysisCache>true</analysisCache>
            <minimumTokens>50</minimumTokens>
            <maxAllowedViolations>0</maxAllowedViolations>
            <ignoreAnnotations>false</ignoreAnnotations>
            <ignoreIdentifiers>false</ignoreIdentifiers>
            <ignoreLiterals>false</ignoreLiterals>
            <includeTests>true</includeTests>
            <!-- check -->
            <failOnViolation>false</failOnViolation>
            <printFailingErrors>false</printFailingErrors>
          </configuration>
        </plugin>
        <plugin> <!-- spotbugs-maven-plugin -->
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>${version.spotbugs-maven-plugin}</version>
          <dependencies>
            <dependency>
              <groupId>com.github.spotbugs</groupId>
              <artifactId>spotbugs</artifactId>
              <version>${version.spotbugs}</version>
            </dependency>
          </dependencies>
          <configuration>
            <threshold>low</threshold>
            <effort>max</effort>
            <nested>false</nested>
            <failOnError>false</failOnError>
            <excludeFilterFile>config/spotbugs/excludeFilter.xml</excludeFilterFile>
            <xmlOutput>true</xmlOutput>
          </configuration>
        </plugin>
        <plugin> <!-- license-maven-plugin -->
          <groupId>com.mycila</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>${version.license-maven-plugin}</version>
          <configuration>
            <failIfMissing>false</failIfMissing>
            <defaultUseDefaultExcludes>false</defaultUseDefaultExcludes>
            <defaultProperties>
              <name>${applicationName}</name>
              <url>${applicationUrl}</url>
              <licenseName>${applicationLicenseName}</licenseName>
              <licenseType>${applicationLicenseType}</licenseType>
              <copyright>${applicationCopyright}</copyright>
            </defaultProperties>
            <defaultHeaderDefinitions>
              <defaultHeaderDefinition>config/license/xml_style.xml</defaultHeaderDefinition>
              <defaultHeaderDefinition>config/license/javadoc_style.xml</defaultHeaderDefinition>
            </defaultHeaderDefinitions>
            <mapping>
              <fxml>XML_STYLE</fxml>
              <groovy>JAVADOC_STYLE</groovy>
              <java>JAVADOC_STYLE</java>
            </mapping>
            <licenseSets>
              <licenseSet>
                <header>config/license/LICENSE</header>
                <includes>
                  <include>pom.xml</include>
                  <include>src/**/*</include>
                </includes>
                <excludes>
                  <exclude>**/resources/**/*.properties</exclude>
                  <exclude>**/resources/**/*.png</exclude>
                  <exclude>**/site/**/*.vm</exclude>
                </excludes>
              </licenseSet>
            </licenseSets>
          </configuration>
        </plugin>
        <plugin> <!-- maven-resources-plugin -->
          <artifactId>maven-resources-plugin</artifactId>
          <version>${version.maven-resources-plugin}</version>
          <configuration>
            <!--
              The character encoding to use when reading
              and writing filtered resources.
              Default: ${project.build.sourceEncoding}
            -->
            <encoding>${defaultEncoding}</encoding>
            <!--
              The character encoding to use when reading
              and writing filtered properties files.
              If not specified, it will default to the value of
              the "encoding" parameter.
            -->
            <propertiesEncoding>${defaultEncoding}</propertiesEncoding>
          </configuration>
        </plugin>
        <plugin> <!-- native2ascii-maven-plugin -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>native2ascii-maven-plugin</artifactId>
          <version>${version.native2ascii-maven-plugin}</version>
        </plugin>
        <plugin> <!-- maven-source-plugin -->
          <artifactId>maven-source-plugin</artifactId>
          <version>${version.maven-source-plugin}</version>
        </plugin>
        <plugin> <!-- maven-javadoc-plugin -->
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${version.maven-javadoc-plugin}</version>
          <configuration>
            <notimestamp>true</notimestamp>
            <bottom>${applicationCopyright}</bottom>
            <additionalOptions>-html5</additionalOptions>
            <sourceFileExcludes>
              <sourceFileExclude>**/module-info.java</sourceFileExclude>
            </sourceFileExcludes>
          </configuration>
        </plugin>
        <plugin> <!-- maven-jxr-plugin -->
          <artifactId>maven-jxr-plugin</artifactId>
          <version>${version.maven-jxr-plugin}</version>
          <configuration>
            <bottom>${applicationCopyright}</bottom>
          </configuration>
        </plugin>
        <plugin> <!-- maven-jar-plugin -->
          <artifactId>maven-jar-plugin</artifactId>
          <version>${version.maven-jar-plugin}</version>
          <configuration>
            <outputDirectory>${jlinkModsDir}</outputDirectory>
            <!--excludes>
              <exclude></exclude>
            </excludes-->
            <archive>
              <addMavenDescriptor>false</addMavenDescriptor>
              <manifest>
                <addDefaultEntries>false</addDefaultEntries>
                <mainClass>${applicationClassName}</mainClass>
              </manifest>
              <manifestEntries>
                <Specification-Title>${applicationName}</Specification-Title>
                <Specification-Version>${project.version}</Specification-Version>
                <Specification-Vendor>${applicationVendor}</Specification-Vendor>
                <Implementation-Title>${applicationModuleName}</Implementation-Title>
                <Implementation-Version>${project.version}</Implementation-Version>
                <Implementation-Vendor>${applicationVendor}</Implementation-Vendor>
                <SplashScreen-Image>${applicationSplashImage}</SplashScreen-Image>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>
        <plugin> <!-- maven-assembly-plugin -->
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${version.maven-assembly-plugin}</version>
        </plugin>
        <plugin> <!-- gmavenplus-plugin -->
          <groupId>org.codehaus.gmavenplus</groupId>
          <artifactId>gmavenplus-plugin</artifactId>
          <version>${version.gmavenplus-plugin}</version>
        </plugin>
        <plugin> <!-- maven-surefire-plugin -->
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${version.maven-surefire-plugin}</version>
          <configuration>
            <argLine>
              -Dfile.encoding=${defaultEncoding}
              --add-opens ${applicationModuleName}/ru.akman.gui=ALL-UNNAMED
              --add-opens ${applicationModuleName}/ru.akman.launcher=ALL-UNNAMED
              @{argLine} -javaagent:${org.mockito:mockito-core:jar}
            </argLine>
            <!--
            <consoleOutputReporter
                implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5ConsoleOutputReporter">
              <encoding>${defaultEncoding}</encoding>
              <usePhrasedFileName>false</usePhrasedFileName>
            </consoleOutputReporter>
            <statelessTestsetInfoReporter
                implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5StatelessTestsetInfoReporter">
              <usePhrasedFileName>false</usePhrasedFileName>
              <usePhrasedClassNameInRunning>true</usePhrasedClassNameInRunning>
              <usePhrasedClassNameInTestCaseSummary>true</usePhrasedClassNameInTestCaseSummary>
            </statelessTestsetInfoReporter>
            <statelessTestsetReporter
                implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter">
              <version>3.0</version>
              <usePhrasedFileName>false</usePhrasedFileName>
              <usePhrasedTestSuiteClassName>true</usePhrasedTestSuiteClassName>
              <usePhrasedTestCaseClassName>true</usePhrasedTestCaseClassName>
              <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>
            </statelessTestsetReporter>
            -->
          </configuration>
        </plugin>
        <plugin> <!-- maven-surefire-report-plugin -->
          <artifactId>maven-surefire-report-plugin</artifactId>
          <version>${version.maven-surefire-report-plugin}</version>
        </plugin>
        <plugin> <!-- maven-failsafe-plugin -->
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${version.maven-failsafe-plugin}</version>
        </plugin>
        <plugin> <!-- jacoco-maven-plugin -->
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${version.jacoco-maven-plugin}</version>
        </plugin>
        <plugin> <!-- exec-maven-plugin -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>${version.exec-maven-plugin}</version>
        </plugin>
        <plugin> <!-- jlink-maven-plugin -->
          <groupId>com.github.akman</groupId>
          <artifactId>jlink-maven-plugin</artifactId>
          <version>${version.jlink-maven-plugin}</version>
          <configuration>
            <!--
              Specifies the JDK home path which provides the tool needed.
              If not specified the jlink tool executable will be find in
              the following order:

                - user specified JDK home directory by toolchains-plugin
                - JDK home directory specified by system variable JAVA_HOME
                - system path specified by system variable PATH
            -->
            <!--toolhome>${env.JAVA_HOME}</toolhome-->
            <!--
              Specifies the location in which modular dependencies
              will be placed.
              Default value: ${project.build.directory}/jlink/mods.
            -->
            <modsdir>${jlinkModsDir}</modsdir>
            <!--
              Specifies the location in which non modular dependencies
              will be placed.
              Default value: ${project.build.directory}/jlink/libs.
            -->
            <libsdir>${jlinkLibsDir}</libsdir>

            <!-- jlink basic -->

            <!--
              Specifies the module path. The path where the jlink tool discovers
              observable modules: modular JAR files, JMOD files, exploded modules.
              If this option is not specified, then the default module path
              is $JAVA_HOME/jmods. This directory contains the java.base module
              and the other standard and JDK modules. If this option is specified
              but the java.base module cannot be resolved from it, then
              the jlink command appends $JAVA_HOME/jmods to the module path.

              pathelements - passed to jlink as is
              filesets - sets of files (without directories)
              dirsets - sets of directories (without files)
              dependencysets - sets of dependencies with specified includes and
                               excludes patterns (glob: or regex:) for file names
                               and regex patterns only for module names
            -->
            <modulepath>
              <pathelements>
                <pathelement>${jlinkModsDir}</pathelement>
              </pathelements>
              <!--
              <dirsets>
                <dirset>
                  <directory>${build.dir}</directory>
                  <includes>
                    <include>classes</include>
                  </includes>
                </dirset>
              </dirsets>
              -->
              <!--
              <dependencysets>
                <dependencyset>
                  <includeoutput>true</includeoutput>
                  <excludeautomatic>true</excludeautomatic>
                  <excludenames>
                    <excludename>javafx\..+Empty</excludename>
                  </excludenames>
                </dependencyset>
              </dependencysets>
              -->
            </modulepath>
            <!--
              Specifies the modules names (names of root modules) to add to
              the runtime image. Their transitive dependencies will add too.
            -->
            <addmodules>
              <addmodule>${applicationModuleName}</addmodule>
            </addmodules>
            <!--
              Specifies the location of the generated runtime image.
              Default value: ${project.build.directory}/runtime.
            -->
            <output>${jlinkImageDir}</output>
            <!--
              Limits the universe of observable modules to those in
              the transitive closure of the named modules, mod,
              plus the main module, if any, plus any further
              modules specified in the "addmodules" property.
              It used to limit resolve any services other than
              the selected services, if the property "bindservices"
              set to true.
            -->
            <!--limitmodules>
              <limitmodule>org.example.limitmodule</limitmodule>
            </limitmodules-->
            <!--
              Suggest providers that implement the given service types
              from the module path.
            -->
            <!--suggestproviders>
              <suggestprovider>provider.name</suggestprovider>
            </suggestproviders-->
            <!--
              Save jlink options in the given file.
            -->
            <!--saveopts>${project.build.directory}/jlink-opts</saveopts-->
            <!--
              The last plugin allowed to sort resources.
            -->
            <!--resourceslastsorter>resource-sorter-name</resourceslastsorter-->
            <!--
              Post process an existing image.
            -->
            <!--postprocesspath>${project.build.directory}/imagefile</postprocesspath-->
            <!--
              Enable verbose tracing.
              Default value: false.
            -->
            <verbose>true</verbose>
            <!--
              Link service provider modules and their dependencies.
              Default value: false.
            -->
            <!--bindservices>false</bindservices-->
            <!--
              Specifies the launcher command name for the module or
              the command name for the module and main class (the module and
              the main class names are separated by a slash). Arguments passed
              to jvm, arguments passed to the application. Platform specific
              templates for launcher script.
            -->
            <launcher>
              <command>${applicationLauncherName}</command>
              <mainmodule>${applicationModuleName}</mainmodule>
              <mainclass>${applicationClassName}</mainclass>
              <jvmargs>${applicationJvmArgs}</jvmargs>
              <args>${applicationArgs}</args>
              <nixtemplate>${jlinkTemplateNix}</nixtemplate>
              <wintemplate>${jlinkTemplateWin}</wintemplate>
            </launcher>
            <!--
              Excludes header files.
              Default value: false.
            -->
            <noheaderfiles>true</noheaderfiles>
            <!--
              Excludes man pages.
              Default value: false.
            -->
            <nomanpages>true</nomanpages>
            <!--
              Specifies the byte order of the generated
              image { NATIVE | LITTLE | BIG }.
              Default value: NATIVE (the format of your system's architecture).
            -->
            <!--endian>NATIVE</endian-->
            <!--
              Suppresses a fatal error when signed modular JARs are linked
              in the runtime image. The signature-related files of the signed
              modular JARs aren't copied to the runtime image.
              Default value: false.
            -->
            <!--ignoresigninginformation>false</ignoresigninginformation-->
            <!--
              Disables the specified plug-ins.
              For a complete list of all available plug-ins,
              run the command: jlink ‒‒list-plugins
            -->
            <!--disableplugins>
              <disableplugin>compress</disableplugin>
              <disableplugin>dedup-legal-notices</disableplugin>
            </disableplugins-->

            <!-- PLUGINS -->
            <!--
              For plug-in options that require a pattern-list, the value is
              a comma-separated list of elements, with each element using one
              the following forms:

                - glob-pattern
                - glob:glob-pattern
                - regex:regex-pattern
                - @filename

              Example: **/module-info.class,glob:/java.base/java/lang/**
            -->

            <!--
              Compresses all resources in the output image. Specify
              compression { NO_COMPRESSION | CONSTANT_STRING_SHARING | ZIP }.
              An optional pattern-list filter can be specified to list
              the pattern of files to include.
            -->
            <compress>
              <compression>ZIP</compression>
              <!--filters>
                <filter>**/*-info.class</filter>
                <filter>glob:**/module-info.class</filter>
                <filter>regex:/java[a-z]+$</filter>
                <filter>@filename</filter>
              </filters-->
            </compress>
            <!--
              Includes the list of locales where langtag is
              a BCP 47 language tag. This option supports locale matching as
              defined in RFC 4647.
              Ensure that you specified: ‒‒add-modules jdk.localedata when
              using this property.
            -->
            <!--includelocales>
              <includelocale>en</includelocale>
              <includelocale>ru</includelocale>
              <includelocale>*-IN</includelocale>
            </includelocales-->
            <!--
              Orders the specified paths in priority order.
            -->
            <!--orderresources>
              <orderresource>**/*-info.class</orderresource>
              <orderresource>glob:**/module-info.class</orderresource>
              <orderresource>regex:/java[a-z]+$</orderresource>
              <orderresource>@filename</orderresource>
            </orderresources-->
            <!--
              Specify resources to exclude.
            -->
            <!--excluderesources>
              <excluderesource>**/*-info.class</excluderesource>
              <excluderesource>glob:**/META-INF/**</excluderesource>
              <excluderesource>regex:/java[a-z]+$</excluderesource>
              <excluderesource>@filename</excluderesource>
            </excluderesources-->
            <!--
              Strips debug information from the output image.
              Default value: false.
            -->
            <stripdebug>true</stripdebug>
            <!--
              Strip Java debug attributes from classes in the output image.
              Default value: false.
            -->
            <!--stripjavadebugattributes>false</stripjavadebugattributes-->
            <!--
              Exclude native commands (such as java/java.exe) from the image.
              Default value: false.
            -->
            <stripnativecommands>false</stripnativecommands>
            <!--
              De-duplicate all legal notices. If true is specified then
              it will be an error if two files of the same filename
              are different.
              Default value: false.
            -->
            <!--deduplegalnotices>true</deduplegalnotices-->
            <!--
              Specify files to exclude.
            -->
            <!--excludefiles>
              <excludefile>**/*-info.class</excludefile>
              <excludefile>glob:**/META-INF/**</excludefile>
              <excludefile>regex:/java[a-z]+$</excludefile>
              <excludefile>@filename</excludefile>
            </excludefiles-->
            <!--
              Specify a JMOD section to exclude { MAN | HEADERS }.
            -->
            <!--excludejmodsection>MAN</excludejmodsection-->
            <!--
              Specify a file listing the java.lang.invoke classes to pre-generate.
              By default, this plugin may use a builtin list of classes
              to pre-generate. If this plugin runs on a different runtime
              version than the image being created then code generation
              will be disabled by default to guarantee correctness add
              ignore-version=true to override this.
            -->
            <!--generatejliclasses>${project.basedir}/jli-classes</generatejliclasses-->
            <!--
              Load release properties from the supplied option file.
              - adds: is to add properties to the release file.
              - dels: is to delete the list of keys in release file.
              - Any number of key=value pairs can be passed.
            -->
            <!--releaseinfo>
              <file>file</file>
              <adds>
                <key1>value1</key1>
                <key2>value2</key2>
              </adds>
              <dels>
                <key1 />
                <key2 />
              </dels>
            </releaseinfo-->
            <!--
              Fast loading of module descriptors. Always on.
              The jlink CLI is: ‒‒system-modules=.
              Default value: true.
            -->
            <!--systemmodules>false</systemmodules-->
            <!--
              Select the HotSpot VM in
              the output image: { CLIENT | SERVER | MINIMAL | ALL }
              Default value: ALL.
            -->
            <!--vm>ALL</vm-->
          </configuration>
        </plugin>
        <plugin> <!-- jpackage-maven-plugin -->
          <groupId>com.github.akman</groupId>
          <artifactId>jpackage-maven-plugin</artifactId>
          <version>${version.jpackage-maven-plugin}</version>
          <configuration>
            <!--
              Specifies the JDK home path which provides the tool needed.
              If not specified the jpackage tool executable will be find in
              the following order:

                - user specified JDK home directory by toolchains-plugin
                - JDK home directory specified by system variable JAVA_HOME
                - system path specified by system variable PATH
            -->
            <toolhome>${env.JPACKAGE_HOME}</toolhome>
            <!--
              Specifies the location in which generated output files are placed.
              Default value: ${project.build.directory}/jpackage
            -->
            <dest>${jpackageDir}</dest>
            <!--
              Specifies the location in which temporary files are placed.
              If specified, the directory will not be removed upon the task
              completion and must be removed manually.
            -->
            <!--temp>${project.build.directory}/jpackage/temp-app-image</temp-->
            <!--
              Specifies the name of subdirectory relative to
              the destination directory in which files of generated
              application image are placed.
            -->
            <name>${platformImageName}</name>
            <!--
              Enable verbose tracing.
              Default value: false.
            -->
            <verbose>true</verbose>
            <!--
              Specifies version of the application and/or package.
            -->
            <appversion>${applicationVersion}</appversion>
            <!--
              Specifies copyright for the application.
            -->
            <copyright>${applicationCopyright}</copyright>
            <!--
              Specifies description of the application.
            -->
            <description>${applicationDescription}</description>
            <!--
              Specifies vendor of the application.
            -->
            <vendor>${applicationVendor}</vendor>
            <!--
              Specifies the location of a resources directory that override
              jpackage resources. Icons, template files, and other resources
              of jpackage can be overridden by adding replacement resources
              to this directory.
            -->
            <resourcedir>${jpackageResourcesDir}</resourcedir>
          </configuration>
        </plugin>
        <plugin> <!-- maven-install-plugin -->
          <artifactId>maven-install-plugin</artifactId>
          <version>${version.maven-install-plugin}</version>
          <configuration>
            <skip>true</skip>
          </configuration>
        </plugin>
        <plugin> <!-- maven-deploy-plugin -->
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${version.maven-deploy-plugin}</version>
          <configuration>
            <skip>true</skip>
          </configuration>
        </plugin>
        <plugin> <!-- maven-release-plugin -->
          <artifactId>maven-release-plugin</artifactId>
          <version>${version.maven-release-plugin}</version>
          <configuration>
            <tagNameFormat>v@{project.version}</tagNameFormat>
            <autoVersionSubmodules>true</autoVersionSubmodules>
            <useReleaseProfile>false</useReleaseProfile>
            <releaseProfiles>release</releaseProfiles>
            <!--
              Goals to run as part of the preparation step,
              after changing the version in the POMs from x-SNAPSHOT to
              a new version but before committing.
            -->
            <preparationGoals>
              clean
              validate
              site:site
              resources:copy-resources@prepare
              antrun:run@prepare
              scm:checkin@prepare
            </preparationGoals>
            <!--
              Goals to run on completion of the preparation step,
              after transformation back to the next development version
              but before committing.
            -->
            <!--
            <completionGoals>
            </completionGoals>
            -->
            <goals>deploy</goals>
          </configuration>
        </plugin>
        <plugin> <!-- nexus-staging-maven-plugin -->
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <version>${version.nexus-staging-maven-plugin}</version>
          <extensions>true</extensions>
          <configuration>
            <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
            <serverId>ossrh</serverId>
            <nexusUrl>https://oss.sonatype.org/</nexusUrl>
            <autoReleaseAfterClose>true</autoReleaseAfterClose>
            <!--skipStaging>true</skipStaging-->
          </configuration>
        </plugin>
        <plugin> <!-- maven-scm-plugin -->
          <artifactId>maven-scm-plugin</artifactId>
          <version>${version.maven-scm-plugin}</version>
        </plugin>
        <plugin> <!-- maven-gpg-plugin -->
          <artifactId>maven-gpg-plugin</artifactId>
          <version>${version.maven-gpg-plugin}</version>
          <configuration>
            <useAgent>true</useAgent>
          </configuration>
        </plugin>
        <plugin> <!-- versions-maven-plugin -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${version.versions-maven-plugin}</version>
        </plugin>
        <plugin> <!-- maven-dependency-plugin -->
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${version.maven-dependency-plugin}</version>
        </plugin>
        <plugin> <!-- maven-site-plugin -->
          <artifactId>maven-site-plugin</artifactId>
          <version>${version.maven-site-plugin}</version>
          <!--configuration>
            <locales>en</locales>
          </configuration-->
        </plugin>
        <plugin> <!-- maven-project-info-reports-plugin -->
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>${version.maven-project-info-reports-plugin}</version>
        </plugin>
        <plugin> <!-- taglist-maven-plugin -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>taglist-maven-plugin</artifactId>
          <version>${version.taglist-maven-plugin}</version>
          <configuration>
            <tagListOptions>
              <tagClasses>
                <tagClass>
                  <displayName>Documentation</displayName>
                  <tags>
                    <tag>
                      <matchString>DOCME</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>DOCUMENT_ME</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>NOT_YET_DOCUMENTED</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                  </tags>
                </tagClass>
                <tagClass>
                  <displayName>Code</displayName>
                  <tags>
                    <tag>
                      <matchString>TODO</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>@todo</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>FIXME</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>@fixme</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>DOCME</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                    <tag>
                      <matchString>@docme</matchString>
                      <matchType>ignoreCase</matchType>
                    </tag>
                  </tags>
                </tagClass>
              </tagClasses>
            </tagListOptions>
          </configuration>
        </plugin>
        <plugin> <!-- maven-changelog-plugin -->
          <artifactId>maven-changelog-plugin</artifactId>
          <version>${version.maven-changelog-plugin}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin> <!-- properties-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-enforcer-plugin -->
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-clean-plugin -->
        <artifactId>maven-clean-plugin</artifactId>
      </plugin>
      <plugin> <!-- build-helper-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>timestamp-property</id>
            <phase>validate</phase>
            <goals>
              <goal>timestamp-property</goal>
            </goals>
            <configuration>
              <locale>en</locale>
              <name>applicationCurrentYear</name>
              <pattern>yyyy</pattern>
              <unit>year</unit>
            </configuration>
          </execution>
          <execution>
            <id>regex-properties</id>
            <phase>validate</phase>
            <goals>
              <goal>regex-properties</goal>
            </goals>
            <configuration>
              <regexPropertySettings>
                <regexPropertySetting>
                  <name>applicationCopyrightYears</name>
                  <value>${applicationInceptionYear} - ${applicationCurrentYear}</value>
                  <regex>(\d{4}) - \1</regex>
                  <replacement>${applicationCurrentYear}</replacement>
                  <failIfNoMatch>false</failIfNoMatch>
                </regexPropertySetting>
              </regexPropertySettings>
            </configuration>
          </execution>
          <execution>
            <id>parse-version</id>
            <phase>validate</phase>
            <goals>
              <goal>parse-version</goal>
            </goals>
          </execution>
          <execution>
            <id>released-version</id>
            <phase>validate</phase>
            <goals>
              <goal>released-version</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-toolchains-plugin -->
        <artifactId>maven-toolchains-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>toolchain</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-compiler-plugin -->
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-antrun-plugin -->
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>prepare</id>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <echo>antrun:run@prepare</echo>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>codenarc</id>
            <phase>process-test-classes</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <failOnError>false</failOnError>
              <target>
                <taskdef classname="org.codenarc.ant.CodeNarcTask" name="codenarc" />
                <codenarc
                    ruleSetFiles="file:config/codenarc/rules.groovy"
                    maxPriority1Violations="1000"
                    maxPriority2Violations="1000"
                    maxPriority3Violations="1000">
                  <fileset dir="src/test/groovy">
                    <include name="**/*.groovy" />
                  </fileset>
                  <report type="console" />
                  <report type="xml">
                    <option name="outputFile"
                        value="${project.build.directory}/codenarc.xml" />
                    <option name="title" value="${project.name}" />
                  </report>
                  <report type="html">
                    <option name="outputFile"
                        value="${project.reporting.outputDirectory}/codenarc.html" />
                    <option name="title" value="${project.name}" />
                  </report>
                </codenarc>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-checkstyle-plugin -->
        <artifactId>maven-checkstyle-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-test-classes</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-pmd-plugin -->
        <artifactId>maven-pmd-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>cpd-check</goal>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- spotbugs-maven-plugin -->
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- license-maven-plugin -->
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-resources-plugin -->
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>default-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>resources</goal>
            </goals>
            <configuration>
              <filters>
                <filter>target/generated-resources/filters/filter.properties</filter>
                <!--filter>src/main/resources/filters/filter.properties</filter-->
              </filters>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <excludes>
                    <exclude>filters/</exclude>
                    <exclude>filtered/</exclude>
                  </excludes>
                </resource>
                <resource>
                  <directory>src/main/resources/filtered</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>default-testResources</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testResources</goal>
            </goals>
            <configuration>
              <filters>
                <filter>target/generated-test-resources/filters/filter.properties</filter>
                <!--filter>src/test/resources/filters/filter.properties</filter-->
              </filters>
              <resources>
                <resource>
                  <directory>src/test/resources</directory>
                  <excludes>
                    <exclude>filters/</exclude>
                    <exclude>filtered/</exclude>
                  </excludes>
                </resource>
                <resource>
                  <directory>src/test/resources/filtered</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>prepare</id>
            <goals>
              <goal>resources</goal>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}</outputDirectory>
              <resources>
                <resource>
                  <directory>config/readme</directory>
                  <includes>
                    <include>README.md</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- native2ascii-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>native2ascii-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>default-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>resources</goal>
            </goals>
            <configuration>
              <srcDir>src/main/resources/filters</srcDir>
              <targetDir>target/generated-resources/filters</targetDir>
              <includes>
                <include>**/*.properties</include>
              </includes>
            </configuration>
          </execution>
          <execution>
            <id>default-testResources</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>testResources</goal>
            </goals>
            <configuration>
              <srcDir>src/test/resources/filters</srcDir>
              <targetDir>target/generated-test-resources/filters</targetDir>
              <includes>
                <include>**/*.properties</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-source-plugin -->
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-javadoc-plugin -->
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>jar</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-jar-plugin -->
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-assembly-plugin -->
        <artifactId>maven-assembly-plugin</artifactId>
      </plugin>
      <plugin> <!-- gmavenplus-plugin -->
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>compileTests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-surefire-plugin -->
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-failsafe-plugin -->
        <artifactId>maven-failsafe-plugin</artifactId>
      </plugin>
      <plugin> <!-- jacoco-maven-plugin -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>default-jacoco-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-jacoco-report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- exec-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>default-cli</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>java</executable>
              <arguments>
                <argument>-Dfile.encoding=${defaultEncoding}</argument>
                <argument>--module-path</argument>
                <modulepath />
                <argument>--module</argument>
                <argument>${applicationModuleName}/${applicationClassName}</argument>
                <argument>--debug</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- jlink-maven-plugin -->
        <groupId>com.github.akman</groupId>
        <artifactId>jlink-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>jlink</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- jpackage-maven-plugin -->
        <groupId>com.github.akman</groupId>
        <artifactId>jpackage-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>image</id>
            <goals>
              <goal>jpackage</goal>
            </goals>
            <configuration>
              <!--
                Specifies the type of package to
                create: { PLATFORM | IMAGE | EXE | MSI }.
                Default value: PLATFORM (a platform dependent default type)
              -->
              <type>IMAGE</type>
              <!--
                Specifies the location of the predefined runtime
                image (result of jlink) that will be copied into
                the application image.
                If not specified, jpackage will run jlink to create
                the runtime image using options:
                  - strip-debug
                  - no-header-files
                  - no-man-pages
                  - strip-native-commands
              -->
              <runtimeimage>${jlinkImageDir}</runtimeimage>
              <!--
                Specifies the main module (and optionally main class) of
                the application. This module must be located on the module path.
                When this option is specified, the main module will be linked
                in the Java runtime image.
                Either module or main-jar option can be specified
                but not both.
              -->
              <module>${applicationModuleName}/${applicationClassName}</module>
              <!--
                Specifies the command line arguments to pass to the main class
                if no command line arguments are given to the launcher.
              -->
              <arguments>${platformArgs}</arguments>
              <!--
                Specifies the options to pass to the Java runtime.
              -->
              <javaoptions>${platformJvmArgs} -splash:\$APPDIR/${applicationSplashImage}</javaoptions>
              <!--
                Specifies options are added to, or used to overwrite,
                the original command line options to build additional
                alternative launchers.
              -->
              <addlaunchers>
                <addlauncher>
                  <name>${platformLauncherName}-cli</name>
                  <file>${jpackageResourcesDir}/${platformLauncherName}-cli.launcher.properties</file>
                  <module>${applicationModuleName}/${applicationClassName}</module>
                  <javaoptions>${platformJvmArgs}</javaoptions>
                  <appversion>${applicationVersion}</appversion>
                  <icon>${jpackageResourcesDir}/${platformLauncherName}-cli.${platformIconExtension}</icon>
                  <!--arguments>${platformArgs}</arguments-->
                  <!--winconsole>true</winconsole-->
                </addlauncher>
              </addlaunchers>
              <!--
                Specifies the location of the icon of the application package.
              -->
              <icon>${jpackageResourcesDir}/${platformImageName}.${platformIconExtension}</icon>
              <!--
                Enable creating a console launcher for the application,
                should be specified for application which requires console
                interactions.
                Default value: false
              -->
              <!--winconsole>false</winconsole-->
              <!--
                Path of the input directory that contains the files to be
                packaged. All files in the input directory will be packaged into
                the application image into $APPDIR directory.
              -->
              <input>${jpackageInputDir}</input>
            </configuration>
          </execution>
          <execution>
            <id>installer</id>
            <goals>
              <goal>jpackage</goal>
            </goals>
            <configuration>
              <!--
                Specifies the type of package to
                create: { PLATFORM | IMAGE | EXE | MSI }.
                Default value: PLATFORM (a platform dependent default type)
              -->
              <type>MSI</type>
              <!--
                Specifies the location of the predefined application image
                that is used to build an installable package.
              -->
              <appimage>${jpackageImageDir}</appimage>
              <!--
                Specifies the location of a properties file that contains
                list of key, value pairs. The keys "extension", "mime-type",
                "icon", and "description" can be used to describe the association.
              -->
              <fileassociations>
                <fileassociation>${jpackageConfigDir}/associations.properties</fileassociation>
              </fileassociations>
              <!--
                Specifies the relative sub-path under the default installation
                location of the application for Windows, or absolute path of the
                installation directory of the application for Mac or Linux.
              -->
              <installdir>${platformInstallDir}</installdir>
              <!--
                Specifies the location of a license file.
              -->
              <licensefile>${applicationLicenseFile}</licensefile>
              <!--
                Enable adding a dialog to choose a directory in which
                the product is installed.
                Default value: false
              -->
              <windirchooser>true</windirchooser>
              <!--
                Enable adding the application to the system menu.
                Default value: false
              -->
              <winmenu>true</winmenu>
              <!--
                Start menu group this application is placed in.
              -->
              <winmenugroup>${platformMenuGroup}</winmenugroup>
              <!--
                Enable requesting to perform an install on a per-user basis.
                Default value: false
              -->
              <winperuserinstall>true</winperuserinstall>
              <!--
                Enable creating a desktop shortcut for the application.
                Default value: false
              -->
              <winshortcut>true</winshortcut>
              <!--
                UUID associated with upgrades for this package.
              -->
              <winupgradeuuid>${platformUUID}</winupgradeuuid>
              <!--
                An identifier that uniquely identifies the application for macOS.
                Defaults to the main class name. May only use
                alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters.
              -->
              <!--macpackageidentifier>macPackageIdentifier</macpackageidentifier-->
              <!--
                Name of the application as it appears in the Menu Bar.
                This can be different from the application name.
                This name must be less than 16 characters long and be suitable for
                displaying in the menu bar and the application Info window.
                Defaults to the application name.
              -->
              <!--macpackagename>macPackageName</macpackagename-->
              <!--
                When signing the application package, this value is prefixed
                to all components that need to be signed that don't have
                an existing package identifier.
              -->
              <!--macpackagesigningprefix>macPackageSigningPrefix</macpackagesigningprefix-->
              <!--
                Request that the package be signed.
                Default value: false
              -->
              <!--macsign>false</macsign-->
              <!--
                Path of the keychain to search for the signing identity
                (absolute path or relative to the current directory).
                If not specified, the standard keychains are used.
              -->
              <!--macsigningkeychain>macSigningKeyChain</macsigningkeychain-->
              <!--
                Team name portion in Apple signing identities' names.
                For example "Developer ID Application: ".
              -->
              <!--macsigningkeyusername>macSigningKeyUserName</macsigningkeyusername-->
              <!--
                Name for Linux package, defaults to the application name.
              -->
              <!--linuxpackagename>linuxPackageName</linuxpackagename-->
              <!--
                Maintainer for .deb package (email).
              -->
              <!--linuxdebmaintainer>linuxDebMaintainer</linuxdebmaintainer-->
              <!--
                Menu group this application is placed in.
              -->
              <!--linuxmenugroup>linuxMenuGroup</linuxmenugroup-->
              <!--
                Required packages or capabilities for the application.
                Default value: false
              -->
              <!--linuxpackagedeps>false</linuxpackagedeps-->
              <!--
                Type of the license ("License: <name>" of the RPM .spec).
              -->
              <!--linuxrpmlicensetype>MIT</linuxrpmlicensetype-->
              <!--
                Release value of the RPM <name>.spec file or Debian revision value
                of the DEB control file.
              -->
              <!--linuxapprelease>linuxAppRelease</linuxapprelease-->
              <!--
                Group value of the RPM <name>.spec file or Section value
                of DEB control file.
              -->
              <!--linuxappcategory>linuxAppCategory</linuxappcategory-->
              <!--
                Creates a shortcut for the application.
                Default value: false
              -->
              <!--linuxshortcut>true</linuxshortcut-->
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- maven-install-plugin -->
        <artifactId>maven-install-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-deploy-plugin -->
        <artifactId>maven-deploy-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-release-plugin -->
        <artifactId>maven-release-plugin</artifactId>
      </plugin>
      <plugin> <!-- nexus-staging-maven-plugin -->
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-scm-plugin -->
        <artifactId>maven-scm-plugin</artifactId>
        <executions>
          <execution>
            <id>prepare</id>
            <goals>
              <goal>checkin</goal>
            </goals>
            <configuration>
              <message>[maven-release-plugin] update version number</message>
              <includes>README.md</includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- versions-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-dependency-plugin -->
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <plugin> <!-- maven-project-info-reports-plugin -->
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>summary</report>
              <!--report>modules</report-->
              <report>dependency-management</report>
              <report>dependencies</report>
              <!--report>dependency-info</report-->
              <!--report>dependency-convergence</report-->
              <report>plugin-management</report>
              <report>plugins</report>
              <report>distribution-management</report>
              <report>scm</report>
              <report>issue-management</report>
              <report>ci-management</report>
              <!--report>mailing-lists</report-->
              <report>licenses</report>
              <report>team</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- maven-jxr-plugin -->
        <artifactId>maven-jxr-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-javadoc-plugin -->
        <artifactId>maven-javadoc-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- versions-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>property-updates-report</report>
              <report>dependency-updates-report</report>
              <report>plugin-updates-report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- maven-dependency-plugin -->
        <artifactId>maven-dependency-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>analyze-report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- taglist-maven-plugin -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>taglist-maven-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-checkstyle-plugin -->
        <artifactId>maven-checkstyle-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>checkstyle</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- maven-pmd-plugin -->
        <artifactId>maven-pmd-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>cpd</report>
              <report>pmd</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- spotbugs-maven-plugin -->
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
      </plugin>
      <plugin> <!-- maven-surefire-report-plugin -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
      </plugin>
      <plugin> <!-- jacoco-maven-plugin -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin> <!-- maven-changelog-plugin -->
        <artifactId>maven-changelog-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>changelog</report>
              <!--report>file-activity</report-->
              <!--report>dev-activity</report-->
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <profiles>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin> <!-- maven-gpg-plugin -->
            <artifactId>maven-gpg-plugin</artifactId>
            <executions>
              <execution>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <platformFamily>windows</platformFamily>
        <platformImageName>Launcher</platformImageName>
        <platformIconExtension>ico</platformIconExtension>
        <platformLauncherName>${applicationLauncherName}</platformLauncherName>
        <platformArgs>${applicationArgs} --gui</platformArgs>
        <platformJvmArgs>${applicationJvmArgs} -Dfile.encoding=${defaultEncoding}</platformJvmArgs>
        <platformInstallDir>${applicationVendor}/${platformImageName}</platformInstallDir>
        <platformMenuGroup>${applicationVendor}/${platformImageName}</platformMenuGroup>
        <platformUUID>8CF81762-0B19-46A6-875E-1F839A1700D0</platformUUID>
      </properties>
    </profile>
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>
      <properties>
        <platformFamily>linux</platformFamily>
        <platformImageName>Launcher</platformImageName>
        <platformIconExtension>png</platformIconExtension>
        <platformLauncherName>${applicationLauncherName}</platformLauncherName>
        <platformArgs>${applicationArgs} --gui</platformArgs>
        <platformJvmArgs>${applicationJvmArgs} -Dfile.encoding=${defaultEncoding}</platformJvmArgs>
        <platformInstallDir>"/opt/${applicationVendor}/${platformImageName}"</platformInstallDir>
        <platformMenuGroup>${applicationVendor}/${platformImageName}</platformMenuGroup>
        <platformUUID />
      </properties>
    </profile>
    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <platformFamily>mac</platformFamily>
        <platformImageName>Launcher</platformImageName>
        <platformIconExtension>icns</platformIconExtension>
        <platformLauncherName>${applicationLauncherName}</platformLauncherName>
        <platformArgs>${applicationArgs} --gui</platformArgs>
        <platformJvmArgs>${applicationJvmArgs} -Dfile.encoding=${defaultEncoding}</platformJvmArgs>
        <platformInstallDir>"/Applications/${applicationVendor}/${platformImageName}"</platformInstallDir>
        <platformMenuGroup>${applicationVendor}/${platformImageName}</platformMenuGroup>
        <platformUUID />
      </properties>
    </profile>
  </profiles>

  <pluginRepositories>
    <pluginRepository>
      <id>snapshots</id>
      <name>OSS Sonatype Snapshots Repository</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </pluginRepository>
  </pluginRepositories>

  <licenses>
    <license>
      <name>${applicationLicenseName} (${applicationLicenseType})</name>
      <url>${applicationLicenseUrl}</url>
      <comments>${applicationLicenseComment}</comments>
      <distribution>${applicationLicenseDistribution}</distribution>
    </license>
  </licenses>

  <organization>
    <name>${applicationVendor}</name>
    <url>${applicationVendorUrl}</url>
  </organization>

  <developers>
    <developer>
      <id>${applicationAuthorNickname}</id>
      <organization>${applicationVendor}</organization>
      <organizationUrl>${applicationVendorUrl}</organizationUrl>
      <name>${applicationAuthorName}</name>
      <email>${applicationAuthorEmail}</email>
      <url>${applicationAuthorUrl}</url>
      <timezone>Europe/Kaliningrad</timezone>
      <roles>
        <role>${applicationAuthorRole}</role>
      </roles>
    </developer>
  </developers>

  <scm>
    <url>https://github.com/${applicationScmUser}/${applicationScmRepo}/tree/${project.scm.tag}</url>
    <connection>scm:git:git@github.com:${applicationScmUser}/${applicationScmRepo}.git</connection>
    <developerConnection>scm:git:git@github.com:${applicationScmUser}/${applicationScmRepo}.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/${applicationScmUser}/${applicationScmRepo}/issues</url>
  </issueManagement>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <name>OSS Sonatype Snapshots Repository</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <name>OSS Sonatype Releases Repository</name>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
    </repository>
  </distributionManagement>

  <ciManagement>
    <system>Travis CI</system>
    <url>https://travis-ci.com/github/${applicationScmUser}/${applicationScmRepo}</url>
  </ciManagement>

</project>
